/*
 *
 * Connection class for the dbfFile/tinySQL
 * JDBC driver
 *
 * A lot of this code is based on or directly taken from
 * George Reese's (borg@imaginary.com) mSQL driver.
 *
 * So, it's probably safe to say:
 *
 * Portions of this code Copyright (c) 1996 George Reese
 *
 * The rest of it:
 *
 * Copyright 1996 John Wiley & Sons, Inc. 
 * See the COPYING file for redistribution details.
 *
 * $Author: davis $
 * $Date: 2004/12/18 21:30:05 $
 * $Revision: 1.1 $
 */
package com.sqlmagic.tinysql;


import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.Driver;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;


/**
dBase read/write access <br> 
@author Brian Jepson <bjepson@home.com>
@author Marcel Ruff <ruff@swand.lake.de> Added write access to dBase and JDK 2 support
*/
public class dbfFileConnection extends tinySQLConnection {

  private dbfFileDatabaseMetaData myMetaData = null;

  /**
   *
   * Constructs a new JDBC Connection object.
   *
   * @exception SQLException in case of an error
   * @param user the user name - not currently used
   * @param u the url to the data source
   * @param d the Driver object
   *
   */
  public dbfFileConnection(String user, String u, Driver d) 
         throws SQLException {
    super(user, u, d);
  }

  /**
   *
   * Returns a new dbfFile object which is cast to a tinySQL
   * object.
   *
   */
  @Override
public tinySQL get_tinySQL() {

     // if there's a data directory, it will
     // be everything after the jdbc:dbfFile:
     //
     if (url.length() > 13) {
       String dataDir = url.substring(13);
       return new dbfFile(dataDir);
     }

     // if there was no data directory specified in the
     // url, then just use the default constructor
     //
     return new dbfFile();

  }

   /**
    * This method retrieves DatabaseMetaData
    * @see java.sql.Connection#getMetData
    * @exception SQLException
    * @return a DatabaseMetaData object (conforming to JDK 2)
    *
    */
   @Override
public DatabaseMetaData getMetaData() throws SQLException {
     if (myMetaData == null)
       myMetaData = new dbfFileDatabaseMetaData(this);
     return myMetaData;
   }

@Override
public Array createArrayOf(String typeName, Object[] elements)
		throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public Blob createBlob() throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public Clob createClob() throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public NClob createNClob() throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public SQLXML createSQLXML() throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public Statement createStatement(int resultSetType, int resultSetConcurrency,
		int resultSetHoldability) throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public Struct createStruct(String typeName, Object[] attributes)
		throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public Properties getClientInfo() throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public String getClientInfo(String name) throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public int getHoldability() throws SQLException {
	// TODO Auto-generated method stub
	return 0;
}

@Override
public boolean isValid(int timeout) throws SQLException {
	// TODO Auto-generated method stub
	return false;
}

@Override
public CallableStatement prepareCall(String sql, int resultSetType,
		int resultSetConcurrency, int resultSetHoldability) throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
		throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
		throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public PreparedStatement prepareStatement(String sql, String[] columnNames)
		throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public PreparedStatement prepareStatement(String sql, int resultSetType,
		int resultSetConcurrency, int resultSetHoldability) throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public void releaseSavepoint(Savepoint savepoint) throws SQLException {
	// TODO Auto-generated method stub
	
}

@Override
public void rollback(Savepoint savepoint) throws SQLException {
	// TODO Auto-generated method stub
	
}

@Override
public void setClientInfo(Properties properties) throws SQLClientInfoException {
	// TODO Auto-generated method stub
	
}

@Override
public void setClientInfo(String name, String value)
		throws SQLClientInfoException {
	// TODO Auto-generated method stub
	
}

@Override
public void setHoldability(int holdability) throws SQLException {
	// TODO Auto-generated method stub
	
}

@Override
public Savepoint setSavepoint() throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public Savepoint setSavepoint(String name) throws SQLException {
	// TODO Auto-generated method stub
	return null;
}

@Override
public void setTypeMap(Map map) throws SQLException {
	// TODO Auto-generated method stub
	
}

@Override
public boolean isWrapperFor(Class<?> iface) throws SQLException {
	// TODO Auto-generated method stub
	return false;
}

@Override
public <T> T unwrap(Class<T> iface) throws SQLException {
	// TODO Auto-generated method stub
	return null;
}
}
